@inject IJSRuntime JSRuntime
<div class="swipe_container" @ref="SwipeContainerRef">
    @if (LeftOptions is not null)
    {
        <div class="swipe_options left" @ref="LeftRef">
            @LeftOptions
        </div>
    }

    <div class="swipe_element @scrollSnapAlign" @ref="SwipeReference">
        @Item
    </div>

    @if (RightOptions is not null)
    {
        <div class="swipe_options right" @ref="RightRef">
            @RightOptions
        </div>
    }

</div>

@code {
    [Parameter] public RenderFragment? Item { get; set; }
    [Parameter] public RenderFragment? RightOptions { get; set; }
    [Parameter] public RenderFragment? LeftOptions { get; set; }

    ElementReference? LeftRef;
    ElementReference? RightRef;
    ElementReference? SwipeContainerRef;
    ElementReference? SwipeReference;
    private DotNetObjectReference<BItemSliding>? dotNetObjectReference;
    private IJSObjectReference? jSObjectReference;

    private int optionsLeftWidth;
    private int optionsRightWidth;

    const string scrollSnapAlignKey = "scroll-snap-align";
    private string scrollSnapAlign = scrollSnapAlignKey;

    private readonly double OptimalSwipeSpeedMilliseconds = 0.8;
    private (TouchPoint ReferencePoint, DateTime StartTime) StartTouch;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        optionsLeftWidth = await GetWidth(LeftRef);
        optionsRightWidth = await GetWidth(RightRef);
        var longestWidth = Math.Max(optionsRightWidth, optionsLeftWidth);
        dotNetObjectReference = DotNetObjectReference.Create(this);
        jSObjectReference = await JSRuntime.InvokeAsync<IJSObjectReference>("blazorGesture");
        await jSObjectReference.InvokeVoidAsync("init", dotNetObjectReference, SwipeReference, longestWidth);
    }


    async Task<int> GetWidth(ElementReference? reference)
    {
        return reference != null ? await JSRuntime.InvokeAsync<int>("getElementWidth", reference) : 0;
    }
}
