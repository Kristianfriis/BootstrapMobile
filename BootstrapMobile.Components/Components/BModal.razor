@implements IAsyncDisposable;
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime
<div class="offcanvas offcanvas-start show" tabindex="-1" id="@modalId" aria-labelledby="offcanvasLabel" @ref="modalReference">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasLabel">Offcanvas</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.
    </div>
</div>

@code {
    //https://swimburger.net/blog/dotnet/interacting-with-javascript-objects-using-the-new-ijsobjectreference-in-blazor
    private string modalId = $"id_{Guid.NewGuid().ToString().Replace("-", "")}";
    private ElementReference modalReference;
    private DotNetObjectReference<BModal>? dotNetObjectReference;
    private IJSObjectReference? jSObjectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BootstrapMobile.Components/Components/BModal.razor.js?2");
        dotNetObjectReference = DotNetObjectReference.Create(this);
        jSObjectReference = await module.InvokeAsync<IJSObjectReference>("createBlazorOffcanvas");
        await jSObjectReference.InvokeVoidAsync("init", dotNetObjectReference, modalReference);
    }

    public async Task Toggle()
    {
        if (jSObjectReference != null)
            await jSObjectReference.InvokeVoidAsync("dispose");
    }

    public async ValueTask DisposeAsync()
    {
        if (jSObjectReference != null)
        {
            await jSObjectReference.InvokeVoidAsync("dispose");
            await jSObjectReference.DisposeAsync();
        }
        if(dotNetObjectReference != null)
        {
            dotNetObjectReference.Dispose();
        }
    }
}
