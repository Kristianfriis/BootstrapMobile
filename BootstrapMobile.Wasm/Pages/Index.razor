@page "/"
@using BootstrapMobile.JsInterop;
@inject BToastService toastService
@inject MobileBootstrapInterop MobileBootstrapInterop
<PageTitle>Index</PageTitle>
<BHeader Title="Index">
    <HeaderIcon>
        <BIconButton Icon="oi oi-cog" OnClick="Test"></BIconButton>
    </HeaderIcon>
</BHeader>
<BContent Padding="true">
    <h1>Hello, world!</h1>

    Welcome to your new app.

    <SurveyPrompt Title="How is Blazor working for you?" />
    @TestString
    @TestBool
    <BList>
        <BListItem>
            <BSpan>Calculation Span:</BSpan>
            <BSelect TItem="string" @bind-Value="TestString">
                <option selected>Open this select menu</option>
                <option value="1">One</option>
                <option value="2">Two</option>
                <option value="3">Three</option>
            </BSelect>
        </BListItem>
         <BListItem>
            <BSpan>Calculate Overtime:</BSpan>
            <BToggle @bind-Value="TestBool" />
         </BListItem>
    </BList>
    <BDivider />

    <BButton OnClick="ShowToast">Show Toast</BButton>
    <BButton OnClick="ShowToastError">Show Error Toast</BButton>

    <BDivider Size="5"/>
    <BDivider Size="2" Line="true" />

    <BAccordion AccordionId="accordionExample">
        <BAccordionItem>
            <Header>
                Accordion Item #1
            </Header>
            <Content>
                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </Content>
        </BAccordionItem>
        <BAccordionItem>
            <Header>
                Accordion Item #2
            </Header>
            <Content>
                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </Content>
        </BAccordionItem>
        <BAccordionItem>
            <Header>
                Accordion Item #3
            </Header>
            <Content>
                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </Content>
        </BAccordionItem>
    </BAccordion>
    
    <BDivider Size="2" />
    <BItem>
        <BLabel>
            <Content>
                FullScreen:
            </Content>
        </BLabel>
        <BToggle @bind-Value="FullScreen" />
    </BItem>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#demomodal">
        Launch demo modal
    </button>

    <BModal @ref="modalReference" Title="@Title" Placement="@Placement" FullScreen="@FullScreen" Id="demomodal">
        <Body>
            <BItem>
                <BLabel>
                    <Content>
                        This is a BItem with a label
                    </Content>
                </BLabel>
            </BItem>

            <BItem>
                <BLabel>
                    <Header>Header</Header>
                    <Content>
                        This is a BItem with a label and a header
                    </Content>
                </BLabel>
            </BItem>
            <BItem OnClick="ClickableTest">
                <BLabel>
                    <Content>
                        This is a BItem with a label and is clickable
                    </Content>
                </BLabel>
            </BItem>
        </Body>
        <Actions>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" @onclick="Hide">Save changes</button>
        </Actions>
    </BModal>
</BContent>

@code{
    public string TestString = "1";
    public bool TestBool = false;
    BModal? modalReference;
    private void ClickableTest()
    {

    }
    private void Test()
    {
        Console.WriteLine("it worked");
    }

    private string Title = "Start Modal";
    private string Placement = "start";
    private bool FullScreen = false;

    private void ShowToast()
    {
        toastService.ShowToast("I'm a SUCCESS message", ToastLevel.Success, 1000);
    }
    private void ShowToastError()
    {
        toastService.ShowToast("I'm a Error message", ToastLevel.Error);
    }

    private async Task Hide()
    {
        if (modalReference is not null)
            await modalReference.Hide();
    }
}
