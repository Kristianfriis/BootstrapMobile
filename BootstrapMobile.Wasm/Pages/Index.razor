@page "/"
@using BootstrapMobile.JsInterop;
@inject BToastService toastService
@inject MobileBootstrapInterop MobileBootstrapInterop
<PageTitle>Index</PageTitle>
<BHeader Title="Index">
    <HeaderIcon>
        <BIconButton Icon="oi oi-cog" OnClick="Test"></BIconButton>
    </HeaderIcon>
</BHeader>
<BContent Padding="true">
    <h1>Hello, world!</h1>

    Welcome to your new app.

    <SurveyPrompt Title="How is Blazor working for you?" />
    @TestString
    @TestBool
    <BList>
        <BListItem>
            <BSpan>Calculation Span:</BSpan>
            <BSelect TItem="string" @bind-Value="TestString">
                <option selected>Open this select menu</option>
                <option value="1">One</option>
                <option value="2">Two</option>
                <option value="3">Three</option>
            </BSelect>
        </BListItem>
         <BListItem>
            <BSpan>Calculate Overtime:</BSpan>
            <BToggle @bind-Value="TestBool" />
         </BListItem>
    </BList>
    <BDivider />

    <BButton OnClick="ShowToast">Show Toast</BButton>
    <BButton OnClick="ShowToastError">Show Error Toast</BButton>

    <BDivider Size="5"/>
    <BDivider Size="2" Line="true" />

    <BAccordion AccordionId="accordionExample">
        <BAccordionItem>
            <Header>
                Accordion Item #1
            </Header>
            <Content>
                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </Content>
        </BAccordionItem>
        <BAccordionItem>
            <Header>
                Accordion Item #2
            </Header>
            <Content>
                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </Content>
        </BAccordionItem>
        <BAccordionItem>
            <Header>
                Accordion Item #3
            </Header>
            <Content>
                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </Content>
        </BAccordionItem>
    </BAccordion>
    
    <BDivider Size="2" />
    <BButton OnClick="@(()=> ShowModal( "Start Modal", "start", false))">Offcanvas</BButton>
    <BButton OnClick="@(()=> ShowModal( "Right Modal", "end", false))">Right Offcanvas</BButton>
    <BButton OnClick="@(()=> ShowModal( "Top Modal", "top", false))">Top Offcanvas</BButton>
    <BButton OnClick="@(()=> ShowModal( "Bottom Modal", "bottom", false))">Bottom Offcanvas</BButton>
    <BButton OnClick="@(()=> ShowModal( "FullScreen Modal", "bottom", true))">FullScreen Offcanvas</BButton>

    <BModal @ref="modalReference" Title="@Title" Placement="@Placement" FullScreen="@FullScreen" />
</BContent>

@code{
    public string TestString = "1";
    public bool TestBool = false;
    BModal? modalReference;
    private void Test()
    {
        Console.WriteLine("it worked");
    }

    private string Title = "Start Modal";
    private string Placement = "start";
    private bool FullScreen = false;
    async Task ShowModal(string title, string placement, bool fullscreen)
    {
        Title = title;
        Placement = placement;
        FullScreen = fullscreen;

        if (modalReference != null)
            await modalReference.Toggle();
    }

    private void ShowToast()
    {
        toastService.ShowToast("I'm a SUCCESS message", ToastLevel.Success, 1000);
    }
    private void ShowToastError()
    {
        toastService.ShowToast("I'm a Error message", ToastLevel.Error);
    }
}
